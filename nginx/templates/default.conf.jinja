## File managed by Salt.
server {
  # Listen non-SSL (default '{{ default_server|default(False) }}')
  {%- if listen_ip is defined %}
  {%- set listen_ip = listen_ip ~ ':' %}
  {%- endif %}
  listen {{ listen_ip|default('') }}{{ listen_port|default('80') }} {{ 'default_server' if default_server|default(False) else '' }};

  {%- if ssl is defined and ssl is mapping %}
  # Listen on SSL
  {%- if listen_ip_ssl is defined %}
  {%- set listen_ip_ssl = listen_ip_ssl ~ ':' %}
  {%- endif %}
  listen {{ listen_ip_ssl|default('') }}{{ listen_port_ssl|default('443') }} ssl {{ 'spdy' if ssl.spdy|default(False) else '' }} {{ 'default_server' if default_server|default(False) else '' }};

  # Enable SSL
  ssl_certificate /etc/ssl/certs/{{ ssl.cert }};
  ssl_certificate_key /etc/ssl/private/{{ ssl.key }};
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers "AES256+EECDH:AES256+EDH";
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  {%- if ssl.prevent_frame is defined and ssl.prevent_frame == True -%}
  # Prevent from being loaded into an iframe
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  {%- endif %}

  # Enable XSS filter in modern webbrowsers
  add_header X-XSS-Protection "1; mode=block";

  {%- if ssl.forward is defined and ssl.forward == True %}
  # Force redirect Non-SSL requests to SSL
  if ($scheme = http) {
      return 301 https://{{ domain }}:{{ listen_port_ssl|default('443') }}$request_uri;
  }

  {%- if ssl.enable_sts is defined and ssl.enable_sts == True %}
  set $sts "";
  if ($server_port = {{ listen_port_ssl|default('443') }}) {
      set $sts "max-age=31536000;";
  }
  add_header Strict-Transport-Security $sts;
  {%- endif %}

  {%- endif %}
  {%- endif %}

  {%- if redirect_to_www is defined and redirect_to_www == True %}
  # non-www to www redirect
  if ($http_host !~* ^www\.)
  {
  	return 301 $scheme://www.{{ domain }}$request_uri;
  }
  {% elif redirect_from_www is defined and redirect_from_www == True %}
  # www to non-www redirect
  if ($http_host ~* "^www\.(.+)$"){
    return 301 $scheme://{{ domain }}$request_uri;
  }
  {%- endif %}

  # Webroot
  root {{ webroot }};
  server_name {{ domain }} www.{{ domain }} {{ aliases|default([])|join(" ") }};

  location / {
      try_files {{ try_files|default('$uri $uri/ /index.php?$args') }};
  }

  {%- if logdir is defined %}
  access_log {{ logdir }}/{{ domain }}_access.log;
  error_log {{ logdir }}/{{ domain }}_error.log;
  {%- endif %}

  # Upload limit
  client_max_body_size 50m;
  client_body_buffer_size 128k;

  index {{ index|default('index.php') }};

  {% if php|default(true) -%}
  # Handle PHP
  location ~ \.php$ {
      {%- if fastcgi_pass is defined %}
      # Using the configured parameter
      {%- set fastcgi_pass = fastcgi_pass %}
      {%- else %}
      # Use the local socket
      {%- set fastcgi_pass = 'unix:' ~ fpm_sock_dir|default('/var/run/phpfpm') ~ '/fpm_' ~ domain_safe ~ '.sock' %}
      {%- endif %}

      fastcgi_pass {{ fastcgi_pass }};
      fastcgi_index {{ fastcgi_index|default('index.php') }};

      # Increase default buffers
      fastcgi_buffer_size 128k;
      fastcgi_buffers 4 256k;
      fastcgi_busy_buffers_size 256k;

      # Include params
      include fastcgi_params;
      {{ fastcgi_params|default([])|join("\n")|indent(3) }}
  }
  {%- endif %}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  location ~ /\.ht {
      deny all;
  }
  {{ extra_config|default([])|join("\n")|indent(2) }}
}
